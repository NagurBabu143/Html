// 1. Variables
// Variables store data values.

// var: Global/function scope (older usage).
// let: Block scope (preferred).
// const: Block scope, value cannot be reassigned.
// Syntax:


// let variableName = value; 
// const constantName = value;
// var oldVariable = value;
// Example:


// let age = 25;
// const name = "John";
// var city = "New York";
// 2. Data Types
// JavaScript supports the following data types:

// Primitive: String, Number, Boolean, Undefined, Null, BigInt, Symbol
// Non-Primitive: Object, Array, Function
// Example:


// let str = "Hello"; // String
// let num = 123;     // Number
// let bool = true;   // Boolean
// let arr = [1, 2];  // Array
// let obj = { name: "John", age: 25 }; // Object
// 3. Operators
// Operators perform operations on variables and values.

// Arithmetic: +, -, *, /, %, ++, --
// Comparison: ==, ===, !=, !==, <, >, <=, >=
// Logical: &&, ||, !
// Assignment: =, +=, -=, *=, /=
// Ternary: condition ? value1 : value2
// Example:


// let a = 10;
// let b = 20;
// let result = a + b; // Arithmetic
// console.log(a > b ? "A is greater" : "B is greater"); // Ternary
// 4. Control Structures
// Conditional Statements:
// if, else if, else, switch
// Loops:
// for, while, do...while
// Example:


// let age = 18;
// if (age >= 18) {
//   console.log("Adult");
// } else {
//   console.log("Minor");
// }

// for (let i = 0; i < 5; i++) {
//   console.log(i); // Loops
// }
// 5. Functions
// Functions encapsulate reusable code.

// Syntax:


// function functionName(params) {
//   return value;
// }

// const arrowFunction = (params) => value;
// Example:


// function greet(name) {
//   return `Hello, ${name}`;
// }

// const multiply = (a, b) => a * b;
// console.log(greet("John"));
// console.log(multiply(2, 3));
// 6. Objects
// Objects store key-value pairs.

// Example:


// const person = {
//   name: "John",
//   age: 30,
//   greet: function() {
//     console.log("Hello!");
//   }
// };
// console.log(person.name); // Access property
// person.greet(); // Call method
// 7. Arrays
// Arrays store ordered collections of elements.

// Example:


// let fruits = ["Apple", "Banana", "Cherry"];
// fruits.push("Mango"); // Add element
// fruits.pop(); // Remove element
// console.log(fruits);
// 8. DOM Manipulation
// Manipulating HTML and CSS using JavaScript.

// Example:


// document.getElementById("id").innerHTML = "Hello";
// document.querySelector(".class").style.color = "blue";
// 9. Events
// Handling user interactions.

// Example:


// document.getElementById("btn").addEventListener("click", () => {
//   alert("Button Clicked!");
// });
// 10. Promises and Async/Await
// For handling asynchronous operations.

// Example:


// const fetchData = () => {
//   return new Promise((resolve, reject) => {
//     setTimeout(() => resolve("Data Loaded"), 1000);
//   });
// };

// fetchData().then(data => console.log(data));

// (async () => {
//   const data = await fetchData();
//   console.log(data);
// })();
// 11. ES6+ Features
// Key modern features:

// Destructuring:

// let { name, age } = person;
// Spread/Rest Operators:

// let arr = [...fruits, "Mango"];
// Template Literals:

// console.log(`Hello, ${name}!`);
// 12. Classes
// Encapsulation of objects and methods.

// Example:


// class Person {
//   constructor(name, age) {
//     this.name = name;
//     this.age = age;
//   }
//   greet() {
//     console.log(`Hello, I am ${this.name}`);
//   }
// }

// const john = new Person("John", 30);
// john.greet();
// 13. Modules
// Organizing code into reusable files.

// Example:


// // File: math.js
// export const add = (a, b) => a + b;

// // File: main.js
// import { add } from './math.js';
// console.log(add(2, 3));
// 14. Error Handling
// Handling runtime errors.

// Example:


// try {
//   let x = y; // ReferenceError
// } catch (error) {
//   console.error("Error:", error.message);
// } finally {
//   console.log("Execution Complete");
// }
// 15. LocalStorage and SessionStorage
// Storing data in the browser.

// Example:


// localStorage.setItem("name", "John");
// console.log(localStorage.getItem("name"));
// sessionStorage.setItem("age", "30");
// Would you like to explore a specific concept in more detail?






// You said:
// add more
// ChatGPT said:
// ChatGPT
// Here’s an expanded and detailed list of JavaScript concepts with syntax, explanations, and examples:

// 16. Hoisting
// Hoisting moves declarations to the top of the scope before execution.

// var is hoisted but undefined until assigned.
// let and const are hoisted but not initialized.
// Example:


// console.log(x); // undefined (var is hoisted)
// var x = 5;

// console.log(y); // ReferenceError (let is hoisted but not initialized)
// let y = 10;
// 17. Closures
// A closure is a function that retains access to its outer function's variables.

// Example:


// function outer() {
//   let count = 0;
//   return function inner() {
//     count++;
//     console.log(count);
//   };
// }

// const counter = outer();
// counter(); // 1
// counter(); // 2
// 18. Callbacks
// A function passed as an argument to another function to execute later.

// Example:


// function greet(name, callback) {
//   console.log(`Hello, ${name}`);
//   callback();
// }

// function sayGoodbye() {
//   console.log("Goodbye!");
// }

// greet("John", sayGoodbye);
// 19. Prototypes
// Prototypes allow objects to inherit methods and properties.

// Example:


// function Person(name) {
//   this.name = name;
// }

// Person.prototype.greet = function () {
//   console.log(`Hello, I am ${this.name}`);
// };

// const john = new Person("John");
// john.greet();
// 20. this Keyword
// Represents the context in which the function is executed.

// Example:


// const person = {
//   name: "John",
//   greet() {
//     console.log(this.name);
//   }
// };
// person.greet(); // John
// 21. Arrow Functions and this
// Arrow functions don’t bind their own this.

// Example:


// function regularFunction() {
//   console.log(this);
// }
// const arrowFunction = () => {
//   console.log(this);
// };

// regularFunction(); // Window (or global object)
// arrowFunction();  // Inherits `this` from its surrounding scope
// 22. Event Loop
// JavaScript handles asynchronous tasks via the event loop.

// Example (setTimeout):


// console.log("Start");
// setTimeout(() => {
//   console.log("Async Task");
// }, 0);
// console.log("End");
// Output:

// sql
// Copy code
// Start
// End
// Async Task
// 23. Destructuring Assignment
// Extract values from arrays or objects into variables.

// Example:


// const person = { name: "John", age: 30 };
// const { name, age } = person;

// const arr = [1, 2, 3];
// const [first, second] = arr;
// 24. Spread and Rest Operators
// Spread: Expands arrays/objects.
// Rest: Gathers remaining elements.
// Example:


// const arr = [1, 2, 3];
// const newArr = [...arr, 4]; // Spread

// function sum(...nums) {
//   return nums.reduce((total, num) => total + num);
// }
// console.log(sum(1, 2, 3)); // Rest
// 25. Map, Filter, and Reduce
// Array methods for transforming and aggregating data.

// Example:


// const numbers = [1, 2, 3, 4];

// const squared = numbers.map((n) => n * n); // [1, 4, 9, 16]
// const even = numbers.filter((n) => n % 2 === 0); // [2, 4]
// const sum = numbers.reduce((total, n) => total + n, 0); // 10
// 26. Default Parameters
// Set default values for function parameters.

// Example:


// function greet(name = "Guest") {
//   console.log(`Hello, ${name}`);
// }

// greet(); // Hello, Guest
// greet("John"); // Hello, John
// 27. Optional Chaining
// Safely access deeply nested properties.

// Example:


// const user = { profile: { name: "John" } };
// console.log(user?.profile?.name); // John
// console.log(user?.address?.city); // Undefined
// 28. Template Literals
// Embed expressions and multi-line strings.

// Example:


// const name = "John";
// console.log(`Hello, ${name}!`); // String interpolation
// 29. JSON
// JavaScript Object Notation for data exchange.

// Example:


// const jsonString = JSON.stringify({ name: "John" }); // Convert object to JSON
// const jsonObject = JSON.parse(jsonString); // Convert JSON to object
// 30. Fetch API
// Modern API for making HTTP requests.

// Example:


// fetch("https://jsonplaceholder.typicode.com/posts")
//   .then((response) => response.json())
//   .then((data) => console.log(data));
// 31. Generators
// Functions that can pause execution and resume later.

// Example:


// function* generator() {
//   yield 1;
//   yield 2;
//   yield 3;
// }

// const gen = generator();
// console.log(gen.next().value); // 1
// console.log(gen.next().value); // 2
// 32. Regular Expressions
// Used for pattern matching.

// Example:


// const pattern = /hello/i;
// console.log(pattern.test("Hello World")); // true
// 33. Symbols
// Unique and immutable data type.

// Example:


// const sym = Symbol("id");
// console.log(sym === Symbol("id")); // false
// 34. Set and Map
// Set: Unique values.
// Map: Key-value pairs.
// Example:


// const set = new Set([1, 2, 3, 3]);
// console.log(set); // {1, 2, 3}

// const map = new Map();
// map.set("key1", "value1");
// console.log(map.get("key1")); // value1
// 35. Async Iterators
// Used to iterate over asynchronous data sources.

// Example:


// const asyncIterable = {
//   [Symbol.asyncIterator]() {
//     let i = 0;
//     return {
//       next: () =>
//         Promise.resolve({
//           value: i++,
//           done: i > 3,
//         }),
//     };
//   },
// };

// (async () => {
//   for await (let num of asyncIterable) {
//     console.log(num);
//   }
// })();
// Would you like to focus on advanced topics like TypeScript, Performance Optimization, or Testing Frameworks?






// You said:
// add more
// ChatGPT said:
// ChatGPT
// Let’s dive deeper and add more JavaScript concepts with syntax, explanations, and examples:

// 36. Event Delegation
// Event delegation allows you to handle events efficiently by attaching a single event listener to a parent element.

// Example:


// document.getElementById("parent").addEventListener("click", (event) => {
//   if (event.target.tagName === "BUTTON") {
//     console.log(`Button ${event.target.textContent} clicked`);
//   }
// });
// 37. Debouncing
// Debouncing ensures that a function is executed only after a specified delay since the last event.

// Example:


// function debounce(func, delay) {
//   let timeout;
//   return function (...args) {
//     clearTimeout(timeout);
//     timeout = setTimeout(() => func.apply(this, args), delay);
//   };
// }

// const log = debounce(() => console.log("Input event!"), 300);
// document.getElementById("input").addEventListener("input", log);
// 38. Throttling
// Throttling ensures that a function is executed at most once in a specified time period.

// Example:


// function throttle(func, limit) {
//   let inThrottle;
//   return function (...args) {
//     if (!inThrottle) {
//       func.apply(this, args);
//       inThrottle = true;
//       setTimeout(() => (inThrottle = false), limit);
//     }
//   };
// }

// const log = throttle(() => console.log("Scroll event!"), 1000);
// window.addEventListener("scroll", log);
// 39. Immediately Invoked Function Expression (IIFE)
// Functions executed immediately after definition.

// Example:


// (function () {
//   console.log("IIFE executed!");
// })();
// 40. Module Pattern
// Encapsulates code and provides public and private methods.

// Example:


// const counterModule = (() => {
//   let count = 0;

//   const increment = () => count++;
//   const getCount = () => count;

//   return { increment, getCount };
// })();

// counterModule.increment();
// console.log(counterModule.getCount()); // 1
// 41. Currying
// Transforming a function with multiple arguments into a sequence of functions.

// Example:


// function curry(fn) {
//   return function curried(...args) {
//     if (args.length >= fn.length) {
//       return fn(...args);
//     } else {
//       return (...nextArgs) => curried(...args, ...nextArgs);
//     }
//   };
// }

// const add = (a, b, c) => a + b + c;
// const curriedAdd = curry(add);
// console.log(curriedAdd(1)(2)(3)); // 6
// 42. Polyfills
// A polyfill is a piece of code that provides modern functionality in older environments.

// Example (Polyfill for Array.map):


// if (!Array.prototype.myMap) {
//   Array.prototype.myMap = function (callback) {
//     let result = [];
//     for (let i = 0; i < this.length; i++) {
//       result.push(callback(this[i], i, this));
//     }
//     return result;
//   };
// }

// console.log([1, 2, 3].myMap((x) => x * 2)); // [2, 4, 6]
// 43. Dynamic Import
// Load modules dynamically using import().

// Example:


// document.getElementById("load").addEventListener("click", async () => {
//   const { greet } = await import("./module.js");
//   greet();
// });
// 44. WeakMap and WeakSet
// WeakMap: Key-value pairs with keys as objects.
// WeakSet: Collection of unique objects.
// Example:


// let obj = { name: "John" };
// const weakMap = new WeakMap();
// weakMap.set(obj, "Value");
// console.log(weakMap.get(obj)); // Value

// const weakSet = new WeakSet();
// weakSet.add(obj);
// console.log(weakSet.has(obj)); // true
// 45. Proxy
// Intercept and redefine fundamental operations.

// Example:


// const handler = {
//   get: (obj, prop) => (prop in obj ? obj[prop] : "Not Found"),
// };

// const user = { name: "John" };
// const proxyUser = new Proxy(user, handler);
// console.log(proxyUser.name); // John
// console.log(proxyUser.age); // Not Found
// 46. Reflect
// Provides methods for object manipulation.

// Example:


// const obj = { name: "John" };
// Reflect.set(obj, "age", 30);
// console.log(Reflect.get(obj, "age")); // 30
// 47. Iterable and Iterator
// Objects that can be iterated over using for...of.

// Example:


// const iterable = {
//   data: [1, 2, 3],
//   [Symbol.iterator]() {
//     let index = 0;
//     return {
//       next: () => ({
//         value: this.data[index++],
//         done: index > this.data.length,
//       }),
//     };
//   },
// };

// for (const value of iterable) {
//   console.log(value); // 1, 2, 3
// }
// 48. Bitwise Operators
// Perform bit-level operations.

// Example:


// console.log(5 & 1); // 1 (AND)
// console.log(5 | 1); // 5 (OR)
// console.log(5 ^ 1); // 4 (XOR)
// console.log(~5);    // -6 (NOT)
// console.log(5 << 1); // 10 (Left shift)
// 49. Typed Arrays
// For handling binary data.

// Example:


// const buffer = new ArrayBuffer(8); // 8 bytes
// const int32View = new Int32Array(buffer);
// int32View[0] = 42;
// console.log(int32View[0]); // 42
// 50. Intl Object
// For internationalization (e.g., date, time, number formatting).

// Example:


// const date = new Date();
// const formattedDate = new Intl.DateTimeFormat("en-US", { dateStyle: "full" }).format(date);
// console.log(formattedDate); // Example: Thursday, January 11, 2025
// 51. Web Workers
// Run scripts in background threads.

// Example:


// // worker.js
// self.onmessage = (e) => {
//   const result = e.data * 2;
//   self.postMessage(result);
// };

// // main.js
// const worker = new Worker("worker.js");
// worker.onmessage = (e) => console.log(e.data); // 10
// worker.postMessage(5);
// 52. Service Workers
// Used for offline capabilities and caching.

// Example:


// navigator.serviceWorker.register("/service-worker.js")
//   .then((reg) => console.log("Service Worker Registered", reg))
//   .catch((err) => console.log("Service Worker Failed", err));
// 53. DocumentFragment
// Used for efficient DOM manipulation.

// Example:


// const fragment = document.createDocumentFragment();
// ["Item 1", "Item 2", "Item 3"].forEach((text) => {
//   const li = document.createElement("li");
//   li.textContent = text;
//   fragment.appendChild(li);
// });
// document.getElementById("list").appendChild(fragment);
// 54. Custom Elements (Web Components)
// Define custom HTML elements.

// Example:


// class MyElement extends HTMLElement {
//   connectedCallback() {
//     this.innerHTML = "<p>Custom Element!</p>";
//   }
// }
// customElements.define("my-element", MyElement);
// 55. Intersection Observer
// Efficiently detect visibility of elements.

// Example:


// const observer = new IntersectionObserver((entries) => {
//   entries.forEach((entry) => {
//     console.log(entry.isIntersecting ? "Visible" : "Not visible");
//   });
// });

// observer.observe(document.getElementById("target"));
// Would you like even more concepts or advanced examples like State Management, WebSockets, or JavaScript Testing Frameworks?






// You said:
// dom
// ChatGPT said:
// ChatGPT
// The DOM (Document Object Model) is a programming interface for web documents. It represents the structure of a document (HTML or XML) as a tree of objects, allowing developers to manipulate elements, attributes, and content dynamically.

// Here’s an in-depth overview of DOM concepts, methods, and examples:

// 1. Accessing DOM Elements
// You can access elements in the DOM using various methods:

// Methods to Select Elements:
// getElementById Selects an element by its id.


// const element = document.getElementById("myId");
// console.log(element);
// getElementsByClassName Returns a live collection of elements with the specified class name.


// const elements = document.getElementsByClassName("myClass");
// console.log(elements[0]); // Access first element
// getElementsByTagName Returns a live collection of elements with the specified tag name.


// const paragraphs = document.getElementsByTagName("p");
// console.log(paragraphs);
// querySelector Returns the first element that matches a CSS selector.


// const element = document.querySelector(".myClass");
// console.log(element);
// querySelectorAll Returns all elements that match a CSS selector (returns a static NodeList).


// const elements = document.querySelectorAll(".myClass");
// elements.forEach((el) => console.log(el));
// 2. Modifying DOM Elements
// Changing Content:
// innerHTML Sets or gets the HTML content of an element.


// document.getElementById("myId").innerHTML = "<strong>New Content</strong>";
// textContent Sets or gets only the text content of an element.


// document.getElementById("myId").textContent = "New Text Content";
// Changing Attributes:
// setAttribute Sets the value of an attribute.


// const element = document.getElementById("myId");
// element.setAttribute("class", "newClass");
// getAttribute Gets the value of an attribute.


// const classValue = element.getAttribute("class");
// console.log(classValue);
// removeAttribute Removes an attribute from an element.


// element.removeAttribute("class");
// Changing Styles:
// Inline Styles Modify individual CSS properties.


// const element = document.getElementById("myId");
// element.style.color = "blue";
// element.style.fontSize = "20px";
// CSS Classes Add, remove, or toggle classes.


// const element = document.getElementById("myId");
// element.classList.add("newClass");
// element.classList.remove("oldClass");
// element.classList.toggle("activeClass");
// 3. Adding and Removing DOM Elements
// Create Elements:
// createElement Create a new element.

// const newElement = document.createElement("p");
// newElement.textContent = "This is a new paragraph.";
// document.body.appendChild(newElement);
// Insert Elements:
// appendChild Adds a child element to the end of a parent.


// const parent = document.getElementById("parentId");
// const child = document.createElement("div");
// child.textContent = "I am a child element.";
// parent.appendChild(child);
// insertBefore Inserts a child before another specified child.


// const parent = document.getElementById("parentId");
// const newChild = document.createElement("p");
// const referenceChild = document.getElementById("referenceId");
// parent.insertBefore(newChild, referenceChild);
// Remove Elements:
// removeChild Removes a child from a parent.


// const parent = document.getElementById("parentId");
// const child = document.getElementById("childId");
// parent.removeChild(child);
// remove Removes the element directly.


// document.getElementById("myId").remove();
// 4. Event Handling
// Add Event Listeners:
// addEventListener Attaches an event handler to an element.


// const button = document.getElementById("myButton");
// button.addEventListener("click", () => {
//   alert("Button clicked!");
// });
// Inline Events Define event handlers directly in HTML (not recommended).

// html
// Copy code
// <button onclick="alert('Button clicked!')">Click Me</button>
// Event Properties:
// event.target Identifies the element that triggered the event.


// document.addEventListener("click", (event) => {
//   console.log(event.target); // Element clicked
// });
// event.preventDefault Prevents the default action of an event.


// const link = document.querySelector("a");
// link.addEventListener("click", (event) => {
//   event.preventDefault();
//   console.log("Default action prevented.");
// });
// event.stopPropagation Stops the event from bubbling up or down.


// document.getElementById("child").addEventListener("click", (event) => {
//   event.stopPropagation();
//   console.log("Click event stopped.");
// });
// 5. Traversing the DOM
// Parent and Child Nodes:
// parentNode Gets the parent node of an element.


// const parent = document.getElementById("childId").parentNode;
// console.log(parent);
// childNodes Returns all child nodes, including text nodes.


// const children = document.getElementById("parentId").childNodes;
// console.log(children);
// children Returns only element nodes.


// const children = document.getElementById("parentId").children;
// console.log(children);
// Siblings:
// nextSibling and previousSibling Accesses the next or previous sibling (including text nodes).


// const next = document.getElementById("myId").nextSibling;
// const previous = document.getElementById("myId").previousSibling;
// nextElementSibling and previousElementSibling Accesses the next or previous sibling element (ignores text nodes).


// const nextElement = document.getElementById("myId").nextElementSibling;
// const previousElement = document.getElementById("myId").previousElementSibling;
// 6. Advanced DOM Concepts
// DocumentFragment
// Efficiently append multiple elements to the DOM.


// const fragment = document.createDocumentFragment();
// ["Item 1", "Item 2", "Item 3"].forEach((text) => {
//   const li = document.createElement("li");
//   li.textContent = text;
//   fragment.appendChild(li);
// });
// document.getElementById("list").appendChild(fragment);
// MutationObserver
// Observe changes in the DOM.


// const observer = new MutationObserver((mutations) => {
//   mutations.forEach((mutation) => console.log(mutation));
// });

// observer.observe(document.getElementById("myId"), {
//   childList: true,
//   attributes: true,
// });
7. Handling DOM Events
Event Capturing and Bubbling
Events propagate in two phases:

Capturing Phase: From the root to the target element.
Bubbling Phase: From the target element back to the root.
Example:


document.getElementById("parent").addEventListener(
  "click",
  () => console.log("Parent clicked (Capturing)"),
  true // Capturing phase
);

document.getElementById("child").addEventListener("click", () => {
  console.log("Child clicked (Bubbling)");
});
Event Delegation
Attach a single event listener to a parent element to manage child elements dynamically.

Example:


document.getElementById("list").addEventListener("click", (event) => {
  if (event.target.tagName === "LI") {
    console.log(`Clicked on ${event.target.textContent}`);
  }
});
Custom Events
You can create and dispatch your own events.

Example:


const customEvent = new CustomEvent("myCustomEvent", { detail: { message: "Hello!" } });
document.addEventListener("myCustomEvent", (e) => console.log(e.detail.message));
document.dispatchEvent(customEvent); // Output: Hello!
Passive Event Listeners
Improve performance for scroll or touch events by using passive: true.

Example:


window.addEventListener(
  "scroll",
  () => {
    console.log("Scrolling...");
  },
  { passive: true }
);
8. DOM Geometry and Scrolling
Getting Element Dimensions
offsetWidth and offsetHeight Includes padding and borders.


const box = document.getElementById("box");
console.log(box.offsetWidth, box.offsetHeight);
clientWidth and clientHeight Excludes borders, includes padding.


console.log(box.clientWidth, box.clientHeight);
scrollWidth and scrollHeight Includes the full content, even outside the visible area.


console.log(box.scrollWidth, box.scrollHeight);
Scrolling Methods
scrollTo Scrolls the window or an element to a specific position.


window.scrollTo({ top: 100, behavior: "smooth" });
scrollIntoView Scrolls an element into view.


document.getElementById("target").scrollIntoView({ behavior: "smooth" });
Bounding Box
Get the position and size of an element relative to the viewport.

Example:


const box = document.getElementById("box");
const rect = box.getBoundingClientRect();
console.log(rect.top, rect.left, rect.width, rect.height);
9. Manipulating DOM Trees
Cloning Nodes
Create a copy of an element.

cloneNode

const original = document.getElementById("original");
const clone = original.cloneNode(true); // true copies all child elements
document.body.appendChild(clone);
Replacing Nodes
replaceChild Replace a child element with another.

const newElement = document.createElement("div");
newElement.textContent = "New Element";
const parent = document.getElementById("parent");
const oldChild = document.getElementById("child");
parent.replaceChild(newElement, oldChild);
Templates
Define reusable HTML templates that are not rendered until explicitly used.

Example:

html
Copy code
<template id="myTemplate">
  <div class="card">
    <h2>Template Content</h2>
    <p>This is a reusable template.</p>
  </div>
</template>

<script>
  const template = document.getElementById("myTemplate").content.cloneNode(true);
  document.body.appendChild(template);
</script>
10. Advanced DOM Observations
ResizeObserver
Tracks size changes of an element.

Example:


const observer = new ResizeObserver((entries) => {
  entries.forEach((entry) => {
    console.log("Size changed:", entry.contentRect.width, entry.contentRect.height);
  });
});

observer.observe(document.getElementById("resizable"));
IntersectionObserver
Detects when an element enters or exits the viewport.

Example:


const observer = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      console.log("Element is in view!");
    }
  });
});

observer.observe(document.getElementById("target"));
MutationObserver
Detects changes in the DOM (e.g., attributes, child nodes).

Example:


const observer = new MutationObserver((mutations) => {
  mutations.forEach((mutation) => {
    console.log("Mutation detected:", mutation);
  });
});

observer.observe(document.getElementById("container"), {
  childList: true,
  attributes: true,
  subtree: true,
});
11. Shadow DOM (Web Components)
Encapsulate styles and markup using Shadow DOM.

Example:


const shadowHost = document.getElementById("shadowHost");
const shadowRoot = shadowHost.attachShadow({ mode: "open" });
shadowRoot.innerHTML = `
  <style>
    p { color: red; }
  </style>
  <p>Shadow DOM Content</p>
`;
12. HTML Collection vs NodeList
HTML Collection
Live collection (updates automatically with DOM changes).
Accessed with getElementsByClassName, getElementsByTagName.
NodeList
Static collection unless returned by querySelectorAll.
Can use forEach.
Example:


const htmlCollection = document.getElementsByClassName("myClass");
const nodeList = document.querySelectorAll(".myClass");

htmlCollection[0].textContent = "Updated!"; // Reflects in the collection
nodeList[0].textContent = "Updated!"; // No automatic updates
13. HTML5 Drag and Drop API
Example:


const draggable = document.getElementById("draggable");
const dropZone = document.getElementById("dropZone");

draggable.addEventListener("dragstart", (e) => {
  e.dataTransfer.setData("text/plain", "This is dragged content");
});

dropZone.addEventListener("dragover", (e) => {
  e.preventDefault(); // Allow drop
});

dropZone.addEventListener("drop", (e) => {
  e.preventDefault();
  const data = e.dataTransfer.getData("text/plain");
  dropZone.textContent = data;
});
14. Browser-Specific APIs
Fullscreen API
Enable fullscreen mode for elements.

Example:


const element = document.getElementById("video");
element.requestFullscreen();
Clipboard API
Read and write to the clipboard.

Example:


navigator.clipboard.writeText("Copied Text").then(() => {
  console.log("Text copied to clipboard");
});
