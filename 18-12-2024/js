
JavaScript Topics and Examples

1. Variables and Data Types
   - Variables: Containers for storing data values.
     - var: Function-scoped or globally scoped.
     - let: Block-scoped, preferable for variable declaration.
     - const: Block-scoped for constants.
   - Data Types:
     - String: A sequence of characters.
     - Number: Numeric values, both integers and floats.
     - Boolean: Represents true/false values.
     - Undefined: A variable that has been declared but not assigned a value.
     - Null: Represents the intentional absence of any value.
     - Object: A collection of key-value pairs.
     - Array: An ordered collection of items.

   Example:
   ```javascript
   let userName = "John"; // String
   const userAge = 25; // Number
   let isUserStudent = true; // Boolean
   console.log("Name:", userName, "Age:", userAge, "Is Student:", isUserStudent);
   ```

2. Operators
   - Arithmetic Operators: +, -, *, /, %.
   - Comparison Operators: ===, !==, >, <, >=, <=.
   - Logical Operators: && (AND), || (OR), ! (NOT).

   Example:
   ```javascript
   let a = 5, b = 3;
   console.log(a + b); // 8
   console.log(a > b); // true
   console.log(a === 5 && b === 3); // true
   ```

3. Conditional Statements
   - if...else: Executes one block of code if the condition is true, otherwise another block.
   - switch: A more readable way to execute code based on the value of a variable.

   Example:
   ```javascript
   if (userAge >= 18) {
       console.log("You are eligible to vote.");
   } else {
       console.log("You are not eligible to vote.");
   }
   ```

4. Loops
   - for Loop: Ideal when the number of iterations is known.
   - while Loop: Executes while a specified condition is true.
   - do...while Loop: Similar to while, but executes at least once.

   Example:
   ```javascript
   for (let i = 1; i <= 3; i++) {
       console.log(`Number: ${i}`);
   }
   ```

5. Functions
   - Function Declaration: A named block of code designed to perform a specific task.
   - Function Expression: A function defined within an expression (anonymous functions).
   - Arrow Functions: A concise way to write functions using =>.

   Example:
   ```javascript
   function user(name) {
       return `Hello, ${name}!`;
   }
   console.log(user("Alice"));
   ```

6. Arrays
   - Creating Arrays: Use square brackets [].
   - Array Methods: push(), pop(), map().

   Example:
   ```javascript
   let fruits = ["Apple", "Banana", "Cherry"];
   fruits.push("Mango"); // Adds "Mango"
   console.log(fruits); // [ 'Apple', 'Banana', 'Cherry', 'Mango' ]
   ```

7. Objects
   - Creating Objects: Use curly braces {}.
   - Accessing Properties: Use dot notation or bracket notation.

   Example:
   ```javascript
   let person = {
       name: "Alice",
       age: 30,
       A() {
           console.log(`Hi, I am ${this.name}`);
       }
   };
   person.A(); // Hi, I am Alice
   ```

8. Promises
   - Promises represent the eventual completion (or failure) of an asynchronous operation.
   - States: Pending, Fulfilled, Rejected.

   Example:
   ```javascript
   let myPromise = new Promise((resolve, reject) => {
       setTimeout(() => resolve("Promise resolved successfully!"), 2000);
   });
   myPromise.then(data => console.log(data));
   ```

9. Async/Await
   - Async functions return a promise.
   - Await pauses the execution until the promise is resolved.

   Example:
   ```javascript
   async function fetchData() {
       let data = await new Promise(resolve => setTimeout(() => resolve("Data Loaded!"), 2000));
       console.log(data);
   }
   fetchData();
   ```

10. Fetch API
    - Used to make network requests and return promises.
    - Response Handling: Use .then() to handle the response and convert it to JSON with .json().

    Example:
    ```javascript
    fetch("https://jsonplaceholder.typicode.com/todos/1")
        .then(response => response.json())
        .then(data => console.log("Fetched Data:", data))
        .catch(error => console.error("Error:", error));
    ```

11. setTimeout
    - Executes a function after a specified delay (in milliseconds).

    Example:
    ```javascript
    setTimeout(() => {
        console.log("This message is delayed by 3 seconds!");
    }, 3000);
    ```

12. setInterval
    - Repeatedly calls a function at specified intervals (in milliseconds).

    Example:
    ```javascript
    let counter = 0;
    let intervalId = setInterval(() => {
        counter++;
        console.log(`Interval count: ${counter}`);
        if (counter === 5) {
            clearInterval(intervalId);
            console.log("Interval cleared.");
        }
    }, 1000);
    ```

13. Scope
    - Scope determines the visibility of variables.
    - **Global Scope**: Variables declared outside any function are globally accessible.
    - **Local Scope**: Variables declared within a function are only accessible within that function.

    Example:
    ```javascript
    let globalVar = "I am global";
    function testScope() {
        let localVar = "I am local";
        console.log(globalVar); // Accessible
        console.log(localVar); // Accessible
    }
    testScope();
    console.log(globalVar); // Accessible
    // console.log(localVar); // Uncaught ReferenceError: localVar is not defined
    ```

14. Hoisting
    - JavaScript hoists declarations to the top of their containing scope.
    - Variables declared with var are hoisted, but not initialized.
    - Function declarations are hoisted completely.

    Example:
    ```javascript
    console.log(x); // undefined
    var x = 5;
    console.log(x); // 5

    sayHello(); // Works
    function sayHello() {
        console.log("Hello!");
    }
    ```

15. Closures
    - A closure is a function that retains access to its lexical scope, even when the function is executed outside that scope.

    Example:
    ```javascript
    function outerFunction() {
        let outerVar = "I am outside!";
        function innerFunction() {
            console.log(outerVar); // Accesses outerVar
        }
        return innerFunction;
    }
    const closureFunc = outerFunction();
    closureFunc(); // I am outside!
    ```

16. Template Literals
    - Template literals are string literals allowing embedded expressions. They use backticks (``) instead of quotes.

    Example:
    ```javascript
    let name = "Alice";
    let Aing = `Hello, ${name}!`; // Template literal
    console.log(Aing); // Hello, Alice!
    ```

17. Spread and Rest Operators
    - The spread operator (...) allows an iterable to expand in places where zero or more arguments are expected.
    - The rest operator collects all remaining elements into an array.

    Example:
    ```javascript
    let numbers = [1, 2, 3];
    let newNumbers = [...numbers, 4, 5]; // Spread operator
    console.log(newNumbers); // [1, 2, 3, 4, 5]

    function sum(...args) { // Rest operator
        return args.reduce((acc, curr) => acc + curr, 0);
    }
    console.log(sum(1, 2, 3, 4)); // 10
    ```

18. Array Methods
    - **forEach()**: Executes a provided function once for each array element.
    - **filter()**: Creates a new array with all elements that pass the test implemented by the provided function.
    - **reduce()**: Executes a reducer function on each element of the array, resulting in a single output value.

    Example:
    ```javascript
    let nums = [1, 2, 3, 4, 5];
    nums.forEach(num => console.log(num * 2)); // 2, 4, 6, 8, 10
    let evenNums = nums.filter(num => num % 2 === 0);
    console.log(evenNums); // [2, 4]
    let total = nums.reduce((acc, curr) => acc + curr, 0);
    console.log(total); // 15
    ```

